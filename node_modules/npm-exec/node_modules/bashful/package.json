{
  "name": "bashful",
  "version": "1.4.3",
  "description": "parse and execute bash without doing any IO",
  "main": "index.js",
  "dependencies": {
    "through": "~2.3.4",
    "resumer": "~0.0.0",
    "duplexer": "~0.0.4",
    "shell-quote": "~1.3.3",
    "decode-prompt": "~0.0.1",
    "minimist": "~0.0.1",
    "inherits": "~1.0.0"
  },
  "devDependencies": {
    "tap": "~0.4.0",
    "concat-stream": "~0.1.1",
    "mkdirp": "~0.3.5"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/bashful.git"
  },
  "homepage": "https://github.com/substack/bashful",
  "keywords": [
    "bash",
    "shell"
  ],
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "license": "MIT",
  "readme": "# bashful\n\nParse and execute bash in javascript without doing any IO\nso you can use your own IO backend.\n\n[![build status](https://secure.travis-ci.org/substack/bashful.png)](http://travis-ci.org/substack/bashful)\n\n# example\n\nusing the default line-buffering in node:\n\n``` js\nvar bash = require('bashful');\nvar fs = require('fs');\n\nvar sh = bash({\n    env: process.env,\n    spawn: require('child_process').spawn,\n    write: fs.createWriteStream,\n    read: fs.createReadStream,\n    exists: fs.exists\n});\n\nvar s = sh.createStream();\nprocess.stdin.pipe(s).pipe(process.stdout);\n```\n\n```\n$ echo hello\nhello\n$ echo $PWD\n/home/substack/projects/bashful\n$ beep boop\nNo command \"beep\" found\n$ echo beep boop | wc -c\n10\n$ false || true && echo bleep\nbleep\n$ echo ONE TWO THREE > outfile.txt\n$ cat outfile.txt\nONE TWO THREE\n$ wc -c < outfile.txt\n14\n```\n\n# raw mode\n\nin raw mode, you get history with up/down arrows, jumping around with\nleft/right/home/end, and control characters like ^C and ^D:\n\n``` js\nvar bash = require('bashful');\nvar fs = require('fs');\n\nvar sh = bash({\n    env: process.env,\n    spawn: require('child_process').spawn,\n    write: fs.createWriteStream,\n    read: fs.createReadStream,\n    exists: fs.exists\n});\nsh.on('close', process.exit);\n\nprocess.stdin.on('data', function (buf) {\n    if (buf[0] === 13) process.stdout.write('\\n');\n    else if (buf[0] > 27 && buf[0] < 127) {\n        process.stdout.write(buf);\n    }\n});\nprocess.stdin.setRawMode(true);\n\nvar s = sh.createStream();\nprocess.stdin.pipe(s).pipe(process.stdout);\n```\n\n# methods\n\n``` js\nvar bash = require('bashful')\n```\n\n## var sh = bash(opts)\n\nCreate a new bashful shell `sh` from `opts`:\n\n* `opts.env` - environment variables to use\n* `opts.write(file)` - return a writable stream for `file`\n* `opts.read(file)` - return a readable stream for `file`\n* `opts.exists(file, cb)` - query whether `file` exists or not as the first\nargument to `cb(ex)`\n* `opts.spawn(cmd, args, opts)` - return a process object or a stream\n* `opts.custom` - array of builtin keywords to delegate to `opts.spawn()`\n\n## sh.createStream()\n\nCreate a duplex stream for the interpreter.\nWrite commands, read command output.\n\n## sh.eval(expr)\n\nReturn a duplex stream for a single command expression `expr`.\n`expr` can have all the fanciness of pipes and control characters but won't\nsplit commands on newlines like `sh.createStream()` will.\n\n# events\n\n## bash.on('spawn', function (cmd, args, opts) {})\n\nJust before a command is executed, this event fires.\n\n## bash.on('read', function (file) {})\n\nJust before a file is read, this event fires.\n\n## bash.on('write', function (file) {})\n\nJust before a file is written to, this event fires.\n\n# status\n\nThe scope of this module is to only support the internally-defined bash\nfunctions you can list by typing `help` in a real bash shell.\n\n## implemented\n\n* `&&`, `;`, `||`, `|`, `<`, `>`\n* `$?`\n* `cd [-L|[-P [-e]]] [dir]`\n* `echo [-neE] [arg ...]`\n* `eval [arg ...]`\n* `exit [n]`\n* `false`\n* `filename [arguments]`\n* `pwd [-LP]`\n* `true`\n\n## not yet implemented\n\n* `job_spec [&]`\n* `(( expression ))`\n* `. filename [arguments]`\n* `:`\n* `[ arg... ]`\n* `[[ expression ]]`\n* `alias [-p] [name[=value] ... ]`\n* `bg [job_spec ...]`\n* `bind [-lpvsPVS] [-m keymap] [-f filen>`\n* `break [n]`\n* `builtin [shell-builtin [arg ...]]`\n* `caller [expr]`\n* `case WORD in [PATTERN [| PATTERN]...)>`\n* `command [-pVv] command [arg ...]`\n* `compgen [-abcdefgjksuv] [-o option]  >`\n* `complete [-abcdefgjksuv] [-pr] [-DE] >`\n* `compopt [-o|+o option] [-DE] [name ..>`\n* `continue [n]`\n* `coproc [NAME] command [redirections]`\n* `declare [-aAfFgilrtux] [-p] [name[=va>`\n* `dirs [-clpv] [+N] [-N]`\n* `disown [-h] [-ar] [jobspec ...]`\n* `enable [-a] [-dnps] [-f filename] [na>`\n* `exec [-cl] [-a name] [command [argume>`\n* `export [-fn] [name[=value] ...] or ex>`\n* `fc [-e ename] [-lnr] [first] [last] o>`\n* `fg [job_spec]`\n* `for NAME [in WORDS ... ] ; do COMMAND>`\n* `for (( exp1; exp2; exp3 )); do COMMAN>`\n* `function name { COMMANDS ; } or name >`\n* `getopts optstring name [arg]`\n* `hash [-lr] [-p pathname] [-dt] [name >`\n* `help [-dms] [pattern ...]`\n* `history [-c] [-d offset] [n] or hist>`\n* `if COMMANDS; then COMMANDS; [ elif C>`\n* `jobs [-lnprs] [jobspec ...] or jobs >`\n* `kill [-s sigspec | -n signum | -sigs>`\n* `let arg [arg ...]`\n* `local [option] name[=value] ...`\n* `logout [n]`\n* `mapfile [-n count] [-O origin] [-s c>`\n* `popd [-n] [+N | -N]`\n* `printf [-v var] format [arguments]`\n* `pushd [-n] [+N | -N | dir]`\n* `read [-ers] [-a array] [-d delim] [->`\n* `readarray [-n count] [-O origin] [-s>`\n* `readonly [-aAf] [name[=value] ...] o>`\n* `return [n]`\n* `select NAME [in WORDS ... ;] do COMM>`\n* `set [-abefhkmnptuvxBCHP] [-o option->`\n* `shift [n]`\n* `shopt [-pqsu] [-o] [optname ...]`\n* `source filename [arguments]`\n* `suspend [-f]`\n* `test [expr]`\n* `time [-p] pipeline`\n* `times`\n* `trap [-lp] [[arg] signal_spec ...]`\n* `type [-afptP] name [name ...]`\n* `typeset [-aAfFgilrtux] [-p] name[=va>`\n* `ulimit [-SHacdefilmnpqrstuvx] [limit>`\n* `umask [-p] [-S] [mode]`\n* `unalias [-a] name [name ...]`\n* `unset [-f] [-v] [name ...]`\n* `until COMMANDS; do COMMANDS; done`\n* `variables - Names and meanings of so>`\n* `wait [id]`\n* `while COMMANDS; do COMMANDS; done`\n* `{ COMMANDS ; }`\n",
  "readmeFilename": "readme.markdown",
  "_id": "bashful@1.4.3",
  "dist": {
    "shasum": "f8207e62919f8639601a16aaf76961bd26500876"
  },
  "_resolved": "git+https://github.com/grncdr/bashful.git#cab06572a2d36528461acd28e79fb2286a8fb5f0",
  "_from": "bashful@git+https://github.com/grncdr/bashful.git#cab0657"
}
